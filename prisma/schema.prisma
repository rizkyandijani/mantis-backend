generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Machine {
  id                String             @id @default(cuid())
  name              String
  type              MachineType
  section           String
  unit              String
  status            MachineStatus      @default(OPERATIONAL)
  templates         QuestionTemplate[]
  dailyMaintenances DailyMaintenance[]
  statusLogs        MachineStatusLog[] @relation("MachineLogs")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

enum MachineType {
  BUBUT
  FRAIS
}

enum DailyMaintenanceStatus {
  APPROVED
  REJECTED
  PENDING
}

/// New enum for machine status
enum MachineStatus {
  OPERATIONAL // Normal running
  MAINTENANCE // Under maintenance
  OUT_OF_SERVICE // Not operational
}

model QuestionTemplate {
  id          String      @id @default(cuid())
  machineType MachineType
  question    String
  order       Int
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  machine          Machine?           @relation(fields: [machineId], references: [id])
  machineId        String?
  QuestionResponse QuestionResponse[]
}

model DailyMaintenance {
  id           String             @id @default(cuid())
  date         DateTime           @default(now())
  dateOnly     DateTime // store only YYYY-MM-DD (waktu di-zerokan)
  machine      Machine            @relation(fields: [machineId], references: [id])
  machineId    String
  student      User               @relation("StudentMaintenances", fields: [studentEmail], references: [email])
  studentEmail String
  approvedBy   User?              @relation("ApprovedByInstructor", fields: [approvedById], references: [id])
  approvedById String?
  approvedAt   DateTime?
  status       DailyMaintenanceStatus
  approvalNote String?
  responses    QuestionResponse[]

  @@unique([machineId, dateOnly])
}

model QuestionResponse {
  id                 String           @id @default(cuid())
  dailyMaintenance   DailyMaintenance @relation(fields: [dailyMaintenanceId], references: [id])
  dailyMaintenanceId String
  questionId         String
  answer             Boolean
  question           QuestionTemplate @relation(fields: [questionId], references: [id])
}

model MachineStatusLog {
  id          String        @id @default(cuid())
  machine     Machine       @relation("MachineLogs", fields: [machineId], references: [id])
  machineId   String
  changedBy   User          @relation(fields: [changedById], references: [id])
  changedById String
  oldStatus   MachineStatus
  newStatus   MachineStatus
  comment     String?
  createdAt   DateTime      @default(now())
}

/// User and roles
enum Role {
  admin
  student
  instructor
}

model User {
  id                  String             @id @default(uuid())
  email               String             @unique
  password            String
  name                String?
  role                Role               @default(student)
  dailyMaintenances   DailyMaintenance[] @relation("StudentMaintenances")
  maintenanceApproved DailyMaintenance[] @relation("ApprovedByInstructor")
  statusLogs          MachineStatusLog[] @relation(fields: [], references: [])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}
